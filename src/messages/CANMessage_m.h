//
// Generated file, do not edit! Created by nedtool 5.4 from messages/CANMessage.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __CANMESSAGE_M_H
#define __CANMESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>messages/CANMessage.msg:21</tt> by nedtool.
 * <pre>
 * enum CANMsgType
 * {
 *     CAN_LOOK_UP = 0;
 *     CAN_FINAL = 1;
 *     JOIN = 2;
 *     JOIN_REPLY = 3;
 *     ADD_NEIGHBOR = 4;
 *     RM_NEIGHBOR = 5;
 *     JOIN_REPLY_FAIL = 6;
 *     UPDATE_AREA = 7;
 *     NEIGHBOR_UPDATE = 8;
 *     NEIGHBOR_EXCHANGE = 9;
 *     ERS = 10;
 *     ERS_REPLY = 11;
 *     NEIGHBOR_TAKEOVER = 12;
 *     CAN_STORE = 13;
 *     CAN_GET = 14;
 *     CAN_REPLICATE = 15;
 *     CAN_FIX_REPLICA = 16;
 *     FIX_LOAD = 17;
 *     CAN_REPLY = 18;
 * }
 * </pre>
 */
enum CANMsgType {
    CAN_LOOK_UP = 0,
    CAN_FINAL = 1,
    JOIN = 2,
    JOIN_REPLY = 3,
    ADD_NEIGHBOR = 4,
    RM_NEIGHBOR = 5,
    JOIN_REPLY_FAIL = 6,
    UPDATE_AREA = 7,
    NEIGHBOR_UPDATE = 8,
    NEIGHBOR_EXCHANGE = 9,
    ERS = 10,
    ERS_REPLY = 11,
    NEIGHBOR_TAKEOVER = 12,
    CAN_STORE = 13,
    CAN_GET = 14,
    CAN_REPLICATE = 15,
    CAN_FIX_REPLICA = 16,
    FIX_LOAD = 17,
    CAN_REPLY = 18
};

/**
 * Class generated from <tt>messages/CANMessage.msg:43</tt> by nedtool.
 * <pre>
 * packet CANMessage
 * {
 *     int type \@enum(CANMsgType);
 *     string label;
 *     unsigned long sender;
 *     string content;
 *     // hop count
 *     int hop;
 * }
 * </pre>
 */
class CANMessage : public ::omnetpp::cPacket
{
  protected:
    int type;
    ::omnetpp::opp_string label;
    unsigned long sender;
    ::omnetpp::opp_string content;
    int hop;

  private:
    void copy(const CANMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CANMessage&);

  public:
    CANMessage(const char *name=nullptr, short kind=0);
    CANMessage(const CANMessage& other);
    virtual ~CANMessage();
    CANMessage& operator=(const CANMessage& other);
    virtual CANMessage *dup() const override {return new CANMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
    virtual const char * getLabel() const;
    virtual void setLabel(const char * label);
    virtual unsigned long getSender() const;
    virtual void setSender(unsigned long sender);
    virtual const char * getContent() const;
    virtual void setContent(const char * content);
    virtual int getHop() const;
    virtual void setHop(int hop);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CANMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CANMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __CANMESSAGE_M_H

